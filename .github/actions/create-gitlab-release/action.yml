name: 'Create GitLab Release'
description: 'Creates a release and tag in GitLab mirroring the GitHub release'

inputs:
  gitlab-token:
    description: 'GitLab API token'
    required: true
  gitlab-project-path:
    description: 'GitLab project path (username/repo)'
    required: true
  version:
    description: 'Release version'
    required: true
  github-token:
    description: 'GitHub token to fetch release notes'
    required: true
  github-repo:
    description: 'GitHub repository name'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Create GitLab Release and Tag
      shell: bash
      run: |
        # Check if tag exists remotely
        if git ls-remote --tags https://oauth2:${{ inputs.gitlab-token }}@gitlab.com/${{ inputs.gitlab-project-path }}.git "refs/tags/v${{ inputs.version }}" | grep -q "v${{ inputs.version }}"; then
          echo "Tag v${{ inputs.version }} already exists in GitLab"
        else
          echo "Creating new tag v${{ inputs.version }}"
          git tag "v${{ inputs.version }}" || true
          git push https://oauth2:${{ inputs.gitlab-token }}@gitlab.com/${{ inputs.gitlab-project-path }}.git "v${{ inputs.version }}"
        fi

        # Get GitHub release details
        GITHUB_RELEASE=$(curl -s -H "Authorization: Bearer ${{ inputs.github-token }}" \
          "https://api.github.com/repos/${{ inputs.github-repo }}/releases/latest")

        RELEASE_NOTES=$(echo $GITHUB_RELEASE | jq -r '.body')
        if [ "$RELEASE_NOTES" = "null" ]; then
          RELEASE_NOTES="Release v${{ inputs.version }}"
        fi

        # Escape release notes for JSON
        ESCAPED_NOTES=$(echo "$RELEASE_NOTES" | jq -R -s '.')

        # Create GitLab release
        RESPONSE=$(curl --request POST \
          --header "PRIVATE-TOKEN: ${{ inputs.gitlab-token }}" \
          --header "Content-Type: application/json" \
          --data "{
            \"name\": \"v${{ inputs.version }}\",
            \"tag_name\": \"v${{ inputs.version }}\",
            \"description\": ${ESCAPED_NOTES}
          }" \
          "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/releases")

        # Verify response
        if ! echo "$RESPONSE" | jq -e '.tag_name' > /dev/null; then
          echo "Failed to create GitLab release:"
          echo "$RESPONSE"
          exit 1
        else
          echo "Successfully created GitLab release v${{ inputs.version }}"
        fi