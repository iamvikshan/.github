name: "Sync Repository"
description: "Syncs branches and pull requests between GitHub and GitLab"
inputs:
  gitlab-token:
    description: "GitLab API token"
    required: true
  github-token:
    description: "GitHub token"
    required: true
  gitlab-username:
    description: "GitLab username"
    required: true
  repo-name:
    description: "Repository name"
    required: true
  default-branch:
    description: "Default branch name"
    required: true
runs:
  using: "composite"
  steps:
    - name: Sync Branches
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        # Setup GitLab remote
        git remote add gitlab "https://oauth2:${{ inputs.gitlab-token }}@gitlab.com/${{ inputs.gitlab-username }}/${{ inputs.repo-name }}.git"

        # Fetch from both remotes
        git fetch origin --no-tags
        git fetch gitlab --no-tags || echo "Failed to fetch from GitLab"

        # Get branch lists
        GITHUB_BRANCHES=$(git branch -r | grep 'origin/' | sed 's#origin/##' | grep -v 'HEAD' | tr -d ' ' | sort)
        GITLAB_BRANCHES=$(git branch -r | grep 'gitlab/' | sed 's#gitlab/##' | tr -d ' ' | sort)

        # Configure git
        git config --global user.name "${{ inputs.gitlab-username }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

        # Sync branches to GitLab
        echo "$GITHUB_BRANCHES" | while read branch; do
          if [ -n "$branch" ]; then
            echo "Syncing branch: $branch"
            git checkout -B "${branch}" "origin/${branch}"
            git push -f gitlab "${branch}:${branch}" -o ci.skip
          fi
        done

        # Clean up deleted branches
        echo "$GITLAB_BRANCHES" | while read gitlab_branch; do
          if [ -n "$gitlab_branch" ] && [ "$gitlab_branch" != "${{ inputs.default-branch }}" ]; then
            if ! echo "$GITHUB_BRANCHES" | grep -Fx "$gitlab_branch" > /dev/null; then
              if ! git show-ref --verify --quiet "refs/remotes/origin/$gitlab_branch"; then
                git push gitlab --delete "${gitlab_branch}"
              fi
            fi
          fi
        done

    - name: Sync Pull Requests
      if: github.event_name == 'push' || github.event_name == 'pull_request'
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        # URL encode the project path
        ENCODED_PATH=$(echo "${{ inputs.gitlab-username }}/${{ inputs.repo-name }}" | perl -MURI::Escape -ne 'print uri_escape($_)')

        # Get project ID with error handling
        PROJECT_ID=$(curl -s -H "PRIVATE-TOKEN: ${{ inputs.gitlab-token }}" \
          "https://gitlab.com/api/v4/projects/${ENCODED_PATH}" | \
          jq -r '.id // empty')

        if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
          echo "Failed to get GitLab project ID"
          exit 1
        fi

        echo "Found GitLab project ID: ${PROJECT_ID}"

        TEMP_BRANCH="temp-sync-$(date +%s)"
        git checkout -b "$TEMP_BRANCH" || exit 1

        # Get PRs with error handling
        GITHUB_PRS=$(gh pr list --state all --json number,title,body,headRefName,baseRefName,headRepositoryOwner,state,mergedAt || echo "[]")

        if [ "$(echo "$GITHUB_PRS" | jq length)" -eq "0" ]; then
          echo "No pull requests to process"
          git checkout -
          git branch -D "$TEMP_BRANCH"
          exit 0
        fi

        echo "$GITHUB_PRS" | jq -c '.[]' | while read -r pr; do
          PR_TITLE=$(echo "$pr" | jq -r '.title')
          PR_DESC=$(echo "$pr" | jq -r '.body')
          SOURCE_BRANCH=$(echo "$pr" | jq -r '.headRefName')
          TARGET_BRANCH=$(echo "$pr" | jq -r '.baseRefName')
          PR_STATE=$(echo "$pr" | jq -r '.state')
          PR_MERGED_AT=$(echo "$pr" | jq -r '.mergedAt')

          MR_IID=$(curl -s -H "PRIVATE-TOKEN: ${{ inputs.gitlab-token }}" \
            "https://gitlab.com/api/v4/projects/${PROJECT_ID}/merge_requests?search=${PR_TITLE}" | \
            jq -r '.[0].iid // empty')

          if [ -n "$MR_IID" ]; then
            if [ "$PR_STATE" = "CLOSED" ]; then
              if [ -n "$PR_MERGED_AT" ] && [ "$PR_MERGED_AT" != "null" ]; then
                glab mr merge "$MR_IID" --when-pipeline-succeeds || true
              else
                curl -X PUT -H "PRIVATE-TOKEN: ${{ inputs.gitlab-token }}" \
                  "https://gitlab.com/api/v4/projects/${PROJECT_ID}/merge_requests/${MR_IID}" \
                  -d "state_event=close" || true
              fi
            fi
          elif [ "$PR_STATE" = "OPEN" ]; then
            glab mr create \
              --source-branch "${SOURCE_BRANCH}" \
              --target-branch "${TARGET_BRANCH}" \
              --title "${PR_TITLE}" \
              --description "${PR_DESC}" \
              --remove-source-branch || true
          fi
        done

        git checkout -
        git branch -D "$TEMP_BRANCH"
